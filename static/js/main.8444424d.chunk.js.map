{"version":3,"sources":["components/selectStatusColor.js","components/TimelineCard.js","components/FundraiserTimeline.js","components/AllFundraisers.js","components/FundraiserForm.js","components/EditFundraiser.js","components/InquiryForm.js","components/CreateFundraiserInquiry.js","reducers/recordsReducer.js","components/FundraiserDetails.js","components/FirehouseCalendar.js","App.js","reportWebVitals.js","index.js"],"names":["selectStatusColor","status","TimelineCard","fundraiser","organization","contactFirstName","contactPhone","contactEmail","deliveryDate","email","date","style","backgroundColor","padding","margin","width","borderRadius","color","format","Date","ph","match","replace","formatPhoneNumber","href","FundraiserTimeline","fundraisers","setHovered","recordsDispatch","useContext","RecordsContext","mode","marginLeft","maxWidth","map","Item","onMouseEnter","onMouseLeave","onClick","recordName","chosenRecord","find","matchesProperty","type","payload","chooseRecord","currentStatus","AllFundraisers","hoveredID","recordsState","useState","updatedFundraisers","setUpdatedFundraisers","useEffect","record","Math","round","field","dataSource","sortBy","createSorter","a","b","columns","title","dataIndex","key","sorter","render","toUpperCase","item","filters","text","value","onFilter","indexOf","product","className","chooseProduct","pagination","size","id","scroll","x","y","onRow","rowIndex","event","recordID","FundraiserForm","initialValues","onFinish","defaultDate","recordToEdit","drawerVisible","Form","useForm","form","Option","Select","labelCol","span","wrapperCol","name","label","Group","direction","showTime","onChange","dateString","console","log","onOk","disabledHours","rules","placeholder","allowClear","formatter","parser","offset","htmlType","EditFundraiser","existingValues","setExistingValues","base","err","fundraiserName","products","deliveryCity","deliveryAddress","deliveryState","deliveryZip","deliveryNotes","daysUntilDelivery","contactLastName","contactAddress","contactAddressLine2","contactCity","contactState","contactZip","contactPreferredMethod","buttCount","hamCount","turkeyCount","sauceCount","customerButtPrice","customerHamPrice","customerTurkeyPrice","customerSaucePrice","firehouseFee","orderTotals","totalRevenue","sellerRecords","organizationProceeds","error","values","update","records","moment","InquiryForm","required","message","CreateFundraiserInquiry","selectedDate","fieldsToSave","setFieldsToSave","readyToSubmit","setReadyToSubmit","create","forEach","fields","formInputs","formattedDate","toISOString","set","recordsReducer","state","action","allRecords","focusedRecordID","viewFocusedRecord","recordHasChanged","alert","Error","Meta","Card","FundraiserDetails","recordToDisplay","orders","total","push","length","totalProducts","prefillStatus","toLowerCase","extra","gutter","flex","bordered","height","actions","disabled","layout","column","toFixed","FirehouseCalendar","fundraiserData","setFundraiserData","chooseRecordToEdit","hasHams","includes","hasTurkeys","hasSauce","onSelect","dateCellRender","firstDate","secondDate","isSame","showZero","count","monthCellRender","monthsFundraisers","filter","object","Header","Layout","Content","Sider","Airtable","apiKey","process","React","createContext","initialState","App","setFundraisers","focusedFundraiser","setFocusedFundraiser","useReducer","select","view","eachPage","fetchNextPage","notification","description","placement","duration","Provider","basename","position","zIndex","theme","to","forceRender","visible","onClose","path","exact","overflow","left","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8444424d.chunk.js","sourcesContent":["const selectStatusColor = (status) => {\n    switch (status) {\n        case 'Inquiry':\n            return '#f50';\n        case 'Active':\n            return '#7cb305';\n        case 'Finalized':\n            return '#faad14';\n        case 'Delivered':\n            return '#597ef7';\n        case 'Cancelled':\n            return '#bfbfbf';\n        default:\n            return '#bfbfbf';\n    }\n};\n\nexport default selectStatusColor;\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { format } from 'date-fns'\nimport selectStatusColor from './selectStatusColor';\n\nconst TimelineCard = ({ fundraiser }) => {\n\n    const convertedDate = (date) => format(new Date(date), 'MMMM dd');\n\n    const { \n        organization,\n        contactFirstName,\n        contactPhone,\n        contactEmail,\n        status,\n        deliveryDate,\n    } = fundraiser;\n    \n    function formatPhoneNumber(ph) {\n        var cleaned = ('' + ph).replace(/\\D/g, '');\n        var match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n        if (match) {\n          return '(' + match[1] + ') ' + match[2] + '-' + match[3];\n        }\n        return null;\n      }\n\n    const createEmailLink = (email) => `mailto:${email}`;\n\n    return (\n        <div style={{backgroundColor: \"white\", padding: \"8px 8px\", margin: \"2px 0px\", width: \"200px\", borderRadius: \"5px\" }}>\n            <h2 style={{ color: selectStatusColor(status), margin: 0}}>{convertedDate(deliveryDate)}</h2>\n            <h3 style={{ color: \"#595959\", margin: 0}}>{organization}</h3>\n            <div style={{color: \"#595959\" }}>{contactFirstName}</div>\n            <div style={{color: \"#595959\" }}>{formatPhoneNumber(contactPhone)}</div>\n            <a href={createEmailLink(contactEmail)}>Email</a>  \n                {/* <div className=\"bigIcons\">🐖 Butts - {buttCount > 0  ? buttCount : \"0\"} </div>\n                <div className=\"bigIcons\">🐷 Hams - {hamCount > 0  ? hamCount : \"0\"} </div>\n                <div className=\"bigIcons\">🦃 Turkeys - {turkeyCount > 0  ? turkeyCount : \"0\"} </div>\n                <div className=\"bigIcons\">🥫 Sauces - {sauceCount > 0  ? sauceCount : \"0\"} </div> */}\n            {/* <Button type=\"contact\">Button</Button> */}\n            {/* <h3>{convertedDate.toDateString()}</h3> */}\n            {/* <h3>{testDate.toDateString()}</h3> */}\n        </div>\n    )\n};\n\nexport default TimelineCard;","import  React, { useContext, useState } from 'react';\nimport TimelineCard from './TimelineCard';\nimport { Timeline } from 'antd';\nimport selectStatusColor from './selectStatusColor';\nimport { find, matchesProperty } from 'lodash';\nimport {RecordsContext} from '../App';\n\n\nconst FundraiserTimeline = ({ fundraisers, setHovered }) => {\n  const chooseRecord = (recordName) => {\n    const chosenRecord = find(fundraisers, matchesProperty('organization', recordName));\n    recordsDispatch({type: 'chooseRecord', payload: chosenRecord[\"recordID\"]})\n  }\n\n  const prefillStatus = (currentStatus) => {\n    return (\n        currentStatus ? currentStatus : \"Inquiry\"\n    )\n  };\n  \n  const {\n    recordsDispatch\n  } = useContext(RecordsContext);\n  \n  return (\n    <div>\n      <div>\n        <Timeline\n          mode=\"left\"\n          style={{\n            marginLeft: \"20px\",\n            padding: \"30px 40px 0px 0px\",\n            maxWidth: '500px'\n          }}\n        >\n        {fundraisers.map(fundraiser => (\n            <Timeline.Item \n              onMouseEnter={() => setHovered(fundraiser['recordID'])}\n              onMouseLeave={() => setHovered(null)}\n              onClick={() => chooseRecord(fundraiser['organization'])}\n              color={selectStatusColor(prefillStatus(fundraiser[\"status\"]))}\n              key={fundraiser[\"recordID\"]}\n            >\n              <TimelineCard fundraiser={fundraiser} />\n            </Timeline.Item>\n        ))}\n        </Timeline>\n      </div>\n    </div>\n  );\n}\n\nexport default FundraiserTimeline;\n","import React, { useContext, useState, useEffect } from 'react';\nimport {sortBy, find, matchesProperty} from 'lodash';\nimport { Table, Tag } from 'antd';\nimport {format} from 'date-fns';\nimport selectStatusColor from './selectStatusColor.js';\nimport {RecordsContext} from '../App';\n\nconst AllFundraisers = ({ fundraisers }) => {\n    const {\n        recordsDispatch,\n        recordsState: {\n            hoveredID\n        }\n    } = useContext(RecordsContext);\n\n    const convertedDate = (date) => format(new Date(date), 'MMM dd');\n    const [updatedFundraisers, setUpdatedFundraisers] = useState('')\n\n    const chooseRecord = (recordName) => {\n        const chosenRecord = find(fundraisers, matchesProperty('organization', recordName));\n        recordsDispatch({type: 'chooseRecord', payload: chosenRecord[\"recordID\"]})\n    }\n\n    const prefillStatus = (currentStatus) => {\n        return (\n            currentStatus ? currentStatus : \"Inquiry\"\n        )\n    };\n\n    useEffect(() => {\n        setUpdatedFundraisers(fundraisers.map(record => {\n            return {\n                ...record,\n                'deliveryDate': convertedDate(record['deliveryDate']),\n                'organizationProceeds': `$${\n                    Math.round(record['organizationProceeds'])\n                }`,\n                'totalRevenue': `$${\n                    Math.round(record['totalRevenue'])\n                }`,\n                'firehouseFee': `$${\n                    Math.round(record['firehouseFee'])\n                }`,\n                'isHovered': record['recordID'] === hoveredID,\n                'key': record[\"recordID\"],\n                'status': `${prefillStatus(record[\"status\"])}`\n            }\n        }))\n    }, [fundraisers]);\n\n    const dataSource = sortBy(updatedFundraisers, ['priority', 'deliveryDate']);\n\n    const createSorter = (field) => (a, b) => a[field] >= b[field] ? -1 : 1;\n    const createFilter = (field) => (value, record) => record[field].indexOf(value) === 0;\n    const isHovered = (id) => id === hoveredID;\n\n    const chooseProduct = (product) => {\n        switch (product) {\n            case 'Boston Butts':\n                return <div key={product} className='tagContentHolder'>\n                    <div className='circleBackground'\n                        style={\n                            {backgroundColor: '#597ef7'}\n                    }>B</div>\n                    <div className='productTagName'\n                        style={\n                            {color: '#597ef7'}\n                    }>\n                        {product}</div>\n                </div>\n            case 'Half Hams':\n                return <div key={product} className='tagContentHolder'>\n                    <div className='circleBackground'\n                        style={\n                            {backgroundColor: '#7cb305'}\n                    }>H</div>\n                    <div className='productTagName'\n                        style={\n                            {color: '#7cb305'}\n                    }>\n                        {product}</div>\n                </div>\n            case 'Whole Turkeys':\n                return <div key={product} className='tagContentHolder'>\n                    <div className='circleBackground'\n                        style={\n                            {backgroundColor: '#13c2c2'}\n                    }>T</div>\n                    <div className='productTagName'\n                        style={\n                            {color: '#13c2c2'}\n                    }>\n                        {product}</div>\n                </div>\n            case 'BBQ Sauce':\n                return <div key={product} className='tagContentHolder'>\n                    <div className='circleBackground'\n                        style={\n                            {backgroundColor: '#9254de'}\n                    }>S</div>\n                    <div className='productTagName'\n                        style={\n                            {color: '#9254de'}\n                    }>\n                        {product}</div>\n                </div>\n            default:\n                return null;\n        }\n    }\n\n    const columns = [\n        {\n            title: 'Organization',\n            dataIndex: 'organization',\n            key: 'organization',\n            sorter: createSorter('organization'),\n            render: organization => (\n                <>\n                    <div>{organization}</div>\n                </>\n            )\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n            render: status => (\n                <>\n                    {status && <Tag color={\n                            selectStatusColor(status)\n                        }\n                        key={status}>\n                        {\n                        status.toUpperCase()\n                    } </Tag>}\n                </>\n            ),\n            sorter: createSorter('status')\n        },\n        {\n            title: 'Sales',\n            dataIndex: 'totalRevenue',\n            key: 'totalRevenue',\n            sorter: (a, b) => a['totalRevenue'] - b['totalRevenue'],\n            render: item => (\n                <>\n                    <div>{item}</div>\n                </>\n            )\n        },\n        {\n            title: 'FH Total',\n            dataIndex: 'firehouseFee',\n            key: 'firehouseFee',\n            render: item => (\n                <>\n                    <div>{item}</div>\n                </>\n            )\n        }, {\n            title: 'Org Total',\n            dataIndex: 'organizationProceeds',\n            key: 'organizationProceeds',\n            render: item => (\n                <>\n                    <div>{item}</div>\n                </>\n            )\n        }, {\n            title: 'D-Date',\n            dataIndex: 'deliveryDate',\n            key: 'deliveryDate',\n            render: item => (\n                <>\n                    <div>{item}</div>\n                </>\n            )\n        }, {\n            title: 'Products',\n            dataIndex: 'products',\n            key: 'products',\n            filters: [\n                {\n                    text: 'Boston Butts',\n                    value: 'Boston Butts'\n                }, {\n                    text: 'Half Hams',\n                    value: 'Half Hams'\n                }, {\n                    text: 'Whole Turkeys',\n                    value: 'Whole Turkeys'\n                }, {\n                    text: 'BBQ Sauce',\n                    value: 'BBQ Sauce'\n                },\n            ],\n            onFilter: createFilter('products'),\n            render: text => {\n                if (text) {\n                    return(text.map((item) => chooseProduct(item)))\n                }\n            }\n        },\n    ];\n\n    return (\n        <>\n            {updatedFundraisers && <div>\n                <Table dataSource={dataSource}\n                    columns={columns}\n                    pagination={false}\n                    size='small'\n                    id='fundraisersTable'\n                    scroll={\n                        {\n                            x: 700,\n                            y: 250\n                        }\n                    }\n                    onRow={\n                        (record, rowIndex) => {\n                            return {\n                                onClick: event => {\n                                    chooseRecord(record[\"organization\"])\n                                },\n                                className: isHovered(record.recordID) ? 'hovered' : '', // click row\n                                id: `row${record.recordID}`,\n                                key: rowIndex,\n                            };\n                        }\n                    }/>\n            </div>}\n        </>\n    );\n}\n\nexport default AllFundraisers;\n","import React, { useContext, useState, useEffect, useForm } from 'react';\nimport { RecordsContext, base } from '../App';\nimport { Form, Input, InputNumber, Button, Select, Radio, DatePicker, Space } from 'antd';\nimport moment from 'moment';\n\nconst FundraiserForm = ({ initialValues, onFinish, defaultDate }) => {\n    const {recordsDispatch, recordsState: {\n            recordToEdit,\n            drawerVisible,\n        }} = useContext(RecordsContext);\n    \n    \n    const [form] = Form.useForm();\n\n    function onChange(value, dateString) {\n        console.log('Selected Time: ', value);\n        console.log('Formatted Selected Time: ', dateString);\n    }\n\n    function onOk(value) {\n        console.log('onOk: ', value);\n      }\n\n    const {Option} = Select;\n    const layout = {\n        labelCol: {\n            span: 8\n        },\n        wrapperCol: {\n            span: 16\n        }\n    };\n    const tailLayout = {\n        wrapperCol: {\n            offset: 8,\n            span: 16\n        }\n    };\n\n    const closeDrawer = () => recordsDispatch({\n        type: \"closeDrawer\",\n    });\n\n    function disabledHours() {\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 21, 22, 23]\n    };\n\n    const selectedDateTimeFormat = 'ddd, MMM Do hh:mm';\n\n    return (\n        <div>\n            <Form {...layout}\n                style={{ width: \"80%\" }}\n                form={form}\n                name=\"control-hooks\"\n                initialValues={initialValues}\n                onFinish={onFinish}\n            >\n                <Form.Item name=\"status\" label=\"Status\">\n                    <Radio.Group>\n                        <Radio value=\"Inquiry\">Inquiry</Radio>\n                        <Radio value=\"Active\">Active</Radio>\n                        <Radio value=\"Finalized\">Finalized</Radio>\n                        <Radio value=\"Delivered\">Delivered</Radio>\n                        <Radio value=\"Cancelled\">Cancelled</Radio>\n                    </Radio.Group>\n                </Form.Item>\n                <Form.Item name=\"deliveryDate\" label=\"Delivery Date\">\n                    <Space direction=\"vertical\" size={12}>\n                        <DatePicker\n                            showTime\n                            format={selectedDateTimeFormat}\n                            onChange={onChange}\n                            onOk={onOk} \n                            disabledHours={disabledHours}\n                            value={defaultDate}\n                        />\n                    </Space>\n                </Form.Item>\n                <Form.Item \n                    name=\"organization\"\n                    label=\"Organization\">\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"deliveryAddress\" label=\"Delivery Address\">\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"deliveryCity\" label=\"Delivery City\">\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"deliveryState\" label=\"Delivery State\">\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"deliveryZip\" label=\"Delivery Zip\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactFirstName\"\n                    label=\"Primary Contact First Name\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactLastName\"\n                    label=\"Primary Contact Last Name\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactAddress\"\n                    label=\"Primary Contact Address\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactAddressLine2\"\n                    label=\"Primary Contact Address Line 2\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactCity\"\n                    label=\"Primary Contact City\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactState\"\n                    label=\"Primary Contact State\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactZip\"\n                    label=\"Primary Contact Zip\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactPreferredMethod\"\n                    label=\"Preferred Contact Method\">\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactEmail\"\n                    label=\"Primary Contact Email\">\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"products\" label=\"Products\" rules={ [{ type: 'array' }] }>\n                    <Select mode=\"multiple\" placeholder=\"Edit Products\" allowClear>\n                        <Option value=\"Boston Butts\">Boston Butts</Option>\n                        <Option value=\"Half Hams\">Half Hams</Option>\n                        <Option value=\"Whole Turkeys\">Whole Turkeys</Option>\n                        <Option value=\"BBQ Sauce\">BBQ Sauce</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"firehouseButtPrice\" label=\"Firehouse Butt Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item name=\"firehouseHamPrice\" label=\"Firehouse Ham Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item name=\"firehouseTurkeyPrice\" label=\"Firehouse Turkey Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item name=\"firehouseSaucePrice\" label=\"Firehouse Sauce Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item name=\"customerButtPrice\" label=\"Customer Butt Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item name=\"customerHamPrice\" label=\"Customer Ham Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item name=\"customerTurkeyPrice\" label=\"Customer Turkey Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item name=\"customerSaucePrice\" label=\"Customer Sauce Price\">\n                    <InputNumber \n                        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                    />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n            </Form>\n        </div>\n\n    )\n};\n\nexport default FundraiserForm;\n","import React, { useContext, useState, useEffect } from 'react';\nimport {RecordsContext, base} from '../App';\nimport FundraiserForm from './FundraiserForm';\nimport moment from 'moment';\n\nconst EditFundraiser = () => {\n    const {recordsDispatch, recordsState: {\n            recordToEdit,\n        }} = useContext(RecordsContext);\n    const [existingValues, setExistingValues] = useState(\"\")\n    \n    useEffect(() => {\n        if (recordToEdit) {\n        base('Fundraisers').find(recordToEdit, function (err, record) {\n            if (record[\"fields\"][\"status\"]) {\n                setExistingValues(record[\"fields\"]);\n            } else {\n                const {\n                        fundraiserName,\n                        organization,\n                        products,\n                        deliveryCity,\n                        deliveryAddress,\n                        deliveryState,\n                        deliveryZip,\n                        deliveryNotes,\n                        deliveryDate,\n                        daysUntilDelivery,\n                        contactFirstName,\n                        contactPhone,\n                        contactLastName,\n                        contactAddress,\n                        contactAddressLine2,\n                        contactCity,\n                        contactState,\n                        contactZip,\n                        contactPreferredMethod,\n                        contactEmail,\n                        status,\n                        buttCount,\n                        hamCount,\n                        turkeyCount,\n                        sauceCount,\n                        customerButtPrice,\n                        customerHamPrice,\n                        customerTurkeyPrice,\n                        customerSaucePrice,\n                        firehouseFee,\n                        orderTotals,\n                        totalRevenue,\n                        sellerRecords,\n                        organizationProceeds,\n                        recordID,\n                    } = record[\"fields\"];\n                setExistingValues({\n                    \"fundraiserName\": fundraiserName,\n                    \"organization\": organization,\n                    \"products\": products,\n                    \"deliveryCity\": deliveryCity,\n                    \"deliveryAddress\": deliveryAddress,\n                    \"deliveryState\": deliveryState,\n                    \"deliveryZip\": deliveryZip,\n                    \"deliveryNotes\": deliveryNotes,\n                    \"deliveryDate\": deliveryDate,\n                    \"daysUntilDelivery\": daysUntilDelivery,\n                    \"contactFirstName\": contactFirstName,\n                    \"contactPhone\": contactPhone,\n                    \"contactLastName\": contactLastName,\n                    \"contactAddress\": contactAddress,\n                    \"contactAddressLine2\": contactAddressLine2,\n                    \"contactCity\": contactCity,\n                    \"contactState\": contactState,\n                    \"contactZip\": contactZip,\n                    \"contactPreferredMethod\": contactPreferredMethod,\n                    \"contactEmail\": contactEmail,\n                    \"status\": \"Inquiry\",\n                    \"buttCount\": buttCount,\n                    \"hamCount\": hamCount,\n                    \"turkeyCount\": turkeyCount,\n                    \"sauceCount\": sauceCount,\n                    \"customerButtPrice\": customerButtPrice,\n                    \"customerHamPrice\": customerHamPrice,\n                    \"customerTurkeyPrice\": customerTurkeyPrice,\n                    \"customerSaucePrice\": customerSaucePrice,\n                    \"firehouseFee\": firehouseFee,\n                    \"orderTotals\": orderTotals,\n                    \"totalRevenue\": totalRevenue,\n                    \"sellerRecords\": sellerRecords,\n                    \"organizationProceeds\": organizationProceeds,\n                    \"recordID\": recordID,\n                })\n            }\n            if (err) {\n                console.error(err);\n                return;\n                }\n            })\n        }\n    }, []);\n\n    const closeDrawer = () => recordsDispatch({\n        type: \"closeDrawer\",\n      });\n    \n    const submitRecordChanges = (values) => {\n        console.log(\"values: \", values);\n        console.log(\"recordToEdit: \", recordToEdit);\n        base('Fundraisers').update([\n            {\n                \"id\": recordToEdit,\n                \"fields\": values,\n            }\n        ], function(err, records) {\n            if (err) {\n                console.log(\"Error: \", err);\n                return;\n            }\n        });\n        recordsDispatch({\n            type: \"updateRecords\",\n        });\n        closeDrawer();\n    };\n\n    function getExistingValues() {\n        console.log(\"existingValues: \", existingValues)\n        return existingValues;\n    }\n\n    return (\n        <>\n            {existingValues &&\n                <FundraiserForm \n                    initialValues={getExistingValues()}\n                    onFinish={submitRecordChanges}\n                    defaultDate={moment(existingValues[\"deliveryDate\"])}\n                />\n            }\n        </>\n    )\n};\n\nexport default EditFundraiser;\n","import React from 'react';\nimport { Form, Input, Button, Radio, DatePicker, Space } from 'antd';\nimport moment from 'moment';\n\nconst InquiryForm = ({ initialValues, onFinish }) => {  \n\n    const [form] = Form.useForm();\n\n    // function onChange(value, dateString, form) {\n    //     console.log('Selected Time: ', value);\n    //     console.log('Formatted Selected Time: ', dateString);\n    //     console.log('Form: ', form);\n    // }\n\n    // function onOk(value) {\n    //     console.log('onOk: ', value);\n    // }\n\n    const layout = {\n        labelCol: {\n            span: 8\n        },\n        wrapperCol: {\n            span: 16\n        }\n    };\n    const tailLayout = {\n        wrapperCol: {\n            offset: 8,\n            span: 16\n        }\n    };\n\n    function disabledHours() {\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 21, 22, 23]\n    };\n\n    const selectedDateTimeFormat = 'ddd, MMM Do hh:mm';\n\n    return (\n        <div>\n            <Form {...layout}\n                style={{ width: \"80%\" }}\n                form={form}\n                name=\"control-hooks\"\n                initialValues={initialValues}\n                onFinish={onFinish}\n            >\n                <Form.Item\n                    name=\"status\"\n                    label=\"Status\"\n                >\n                    <Radio.Group>\n                        <Radio value=\"Inquiry\">Inquiry</Radio>\n                        <Radio value=\"Active\">Active</Radio>\n                        <Radio value=\"Finalized\">Finalized</Radio>\n                        <Radio value=\"Delivered\">Delivered</Radio>\n                        <Radio value=\"Cancelled\">Cancelled</Radio>\n                    </Radio.Group>\n                </Form.Item>\n                <Form.Item\n                    name=\"deliveryDate\"\n                    label=\"Delivery Date\"\n                    // rules={[{ \n                    //     required: false,\n                    //     type: 'object',\n                    // }]}\n                >\n                    {/* <Space direction=\"vertical\" size={12}> */}\n                        <DatePicker\n                            showTime\n                            format={selectedDateTimeFormat}\n                            // onChange={(value, dateString) => onChange(value, dateString, form)}\n                            // onOk={onOk} \n                            disabledHours={disabledHours}\n                            // defaultValue={moment('04-10-2021')}\n                        />\n                    {/* </Space> */}\n                </Form.Item>\n                <Form.Item \n                    name=\"organization\"\n                    label=\"Organization\"\n                    rules={[{ \n                        required: true,\n                        message: 'Please add an Organization name' \n                    }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactFirstName\"\n                    label=\"Primary Contact First Name\"\n                    rules={[{ \n                        required: true,\n                        message: 'Primary Contact is required' \n                    }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactLastName\"\n                    label=\"Primary Contact Last Name\"\n                    rules={[{ \n                        required: true,\n                        message: 'Last name is required' \n                    }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactEmail\"\n                    label=\"Primary Contact Email\"\n                    rules={[{ \n                        required: true,\n                        message: 'Email is required' \n                    }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item \n                    name=\"contactPhone\"\n                    label=\"Primary Contact Phone\"\n                    rules={[{ \n                        required: true,\n                        message: 'Phone number is required' \n                    }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n            </Form>\n        </div>\n\n    )\n};\n\nexport default InquiryForm;\n","import React, { useContext, useState, useEffect, useForm } from 'react';\nimport { RecordsContext, base } from '../App';\nimport InquiryForm from './InquiryForm';\nimport { Form } from 'antd';\nimport { set } from 'lodash';\nimport moment from 'moment';\n\nconst CreateFundraiserInquiry = () => {\n    const { recordsDispatch, recordsState: {\n        selectedDate\n    } } = useContext(RecordsContext);\n    const [fieldsToSave, setFieldsToSave] = useState('');\n    const [readyToSubmit, setReadyToSubmit] = useState(false);\n    \n    useEffect(() => {\n        if (readyToSubmit) {\n            base('Fundraisers').create([\n                {\n                \"fields\": fieldsToSave\n                },\n            ], function(err, records) {\n                if (err) {\n                console.error(err);\n                return;\n                }\n                records.forEach(function (record) {\n                });\n            });\n            recordsDispatch({\n                type: \"updateRecords\",\n            });\n            recordsDispatch({\n                type: \"closeDrawer\",\n            })\n        }\n    }, ([readyToSubmit, fieldsToSave]));\n\n    const saveFields = (fields) => {\n        const formInputs = fields;\n        console.log(\"fields: \", fields);\n        const formattedDate = moment(fields[\"deliveryDate\"]).toISOString();\n        set(formInputs, 'deliveryDate', formattedDate);\n        setFieldsToSave(formInputs);\n        setReadyToSubmit(true);\n    };\n\n    const [form] = Form.useForm();\n    \n    return (\n        <InquiryForm \n            initialValues={{\n                // \"organization\": \"This Is a Test\",\n                \"status\": \"Inquiry\",\n                \"deliveryDate\": selectedDate,\n            }}\n            // defaultDate={selectedDate}\n            onFinish={saveFields}\n        />\n    );\n\n};\n\nexport default CreateFundraiserInquiry;","const recordsReducer = (state, action) => {\n     // get fundraiser data\n     // get focused fundraiser\n     // get focused fundraiser editor\n     // submit fundraiser edits\n     switch (action.type) {\n          case 'setRecords':\n               // console.log(\"records: \", action.payload);\n               return {\n                    ...state,\n                    allRecords: action.payload,\n               }\n          case 'chooseRecord':\n               // console.log(\"select record: \", action.payload)\n               return {\n                    ...state,\n                    focusedRecordID: action.payload,\n                    viewFocusedRecord: true,\n               };\n          case 'updateRecords':\n               // console.log(\"Setting recordHasChanged: true.\")\n               return {\n                    ...state,\n                    recordHasChanged: true,\n               };\n          case 'doNotUpdate':\n               // console.log(\"Let it be.\")\n               return {\n                    ...state,\n                    recordHasChanged: false,\n               };\n          case 'setHovered':\n               return {\n                    ...state,\n                    hoveredID: action.payload,\n               };\n          case 'showDrawer':\n               return {\n                    ...state,\n                    drawerVisible: true,\n               };\n          case 'selectDate':\n               return {\n                    ...state,\n                    selectedDate: action.payload,\n               };\n          case 'editRecord':\n               return {\n                    ...state,\n                    recordToEdit: action.payload,\n               }\n          case 'closeDrawer':\n               return {\n                    ...state,\n                    drawerVisible: false,\n                    recordToEdit: '',\n               }\n          case 'recordChangeComplete':\n               return {\n                    ...state,\n                    alert: {\"type\": \"success\", \"message\": \"Success!\"},\n                    recordHasChanged: false,\n                    // recordToEdit: '',\n//     const alertList = [{type: \"success\", message: \"Success!\"},{type: \"error\", message: \"Darn. Something went wrong.\"},{type: \"info\", message: \"Something you should know ... is that there is a lengthy thing to say about whatever it is we were discussing. Which I'll remember soon. Honestly.\"}];\n               }\n          case 'logError':\n               return {\n                    ...state,\n                    alert: {\"type\": \"error\", \"message\": \"Darn. Something went wrong.\"},\n               }\n          default: throw new Error('unknown action');\n     }\n};\n\nexport default recordsReducer;","import React, { useContext } from 'react';\nimport {RecordsContext} from '../App';\nimport {\n    Card,\n    Col,\n    Row,\n    Button,\n    Descriptions\n} from 'antd';\n\nconst {Meta} = Card;\n\nconst FundraiserDetails = ({ recordToDisplay }) => {\n    const {\n        recordsDispatch,\n    } = useContext(RecordsContext);\n\n\n    const {\n        fundraiserName,\n        organization,\n        products,\n        deliveryCity,\n        deliveryAddress,\n        deliveryState,\n        deliveryZip,\n        deliveryNotes,\n        deliveryDate,\n        daysUntilDelivery,\n        contactFirstName,\n        contactPhone,\n        contactLastName,\n        contactAddress,\n        contactAddressLine2,\n        contactCity,\n        contactState,\n        contactZip,\n        contactPreferredMethod,\n        contactEmail,\n        status,\n        buttCount,\n        hamCount,\n        turkeyCount,\n        sauceCount,\n        customerButtPrice,\n        customerHamPrice,\n        customerTurkeyPrice,\n        customerSaucePrice,\n        firehouseFee,\n        orderTotals,\n        totalRevenue,\n        sellerRecords,\n        organizationProceeds,\n        recordID,\n    } = recordToDisplay;\n\n    let orders = [];\n    if (orderTotals) {\n        orderTotals.map((total) => orders.push(total));\n    }\n    let sellers = 0;\n    if (sellerRecords) {\n        sellers = sellerRecords.length\n    };\n\n    const relativeDeliveryDate = () => {\n        if (daysUntilDelivery > 0) {\n            return `DELIVERY IN ${daysUntilDelivery} DAYS`\n        } else if (daysUntilDelivery === 0) {\n            return \"DELIVERY TODAY\"\n        } return `DELIVERY WAS ${-daysUntilDelivery} DAYS AGO`\n    }\n\n    const totalProducts = buttCount + hamCount + turkeyCount + sauceCount;\n\n    function formatPhoneNumber(ph) {\n        var cleaned = ('' + ph).replace(/\\D/g, '');\n        var match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n        if (match) {\n            return '(' + match[1] + ') ' + match[2] + '-' + match[3];\n        }\n        return null;\n    }\n\n    const prefillStatus = (currentStatus) => {\n        return (\n            currentStatus ? currentStatus : \"Inquiry\"\n        )\n    };\n\n    const showDrawer = () => {\n        recordsDispatch({\n            type: \"showDrawer\",\n        })\n        recordsDispatch({\n            type: \"editRecord\",\n            payload: recordID,\n        })\n    };\n\n    return (\n        <div className=\"site-card-wrapper\">\n            <Card title={ fundraiserName\n                ? `${fundraiserName} (${prefillStatus(status)})`\n                : \"No Name Yet\"}\n                className={\n                    prefillStatus(status).toLowerCase()\n                }\n                style={\n                    {\n                        margin: \"16px 0px\",\n                        padding: \"0px\",\n                        backgroundColor: '#fafafa'\n                    }\n                }\n                extra={\n                    <>\n                <Button onClick={() => showDrawer()}>Edit</Button></>\n            }>\n                <Row type=\"flex\"\n                    gutter={16}>\n                    <Col flex={\"1 1 30%\"}>\n                        <Col>\n                            <Card bordered={false}\n                                style={\n                                    {height: \"100%\"}\n                                }\n                                actions={\n                                    [\n                                        <>\n                                            <Button disabled>Download Labels</Button>\n                                            <Button disabled>Create Invoice</Button>\n                                        </>\n                                    ]\n                            }>\n                                <Meta title=\"COOK IN ______\"/> {\n                                    totalProducts > 0 \n                                        ? <>\n                                            <div>{\n                                                buttCount > 0 && `${buttCount} Butt${\n                                                    buttCount > 1 ? 's' : ''\n                                                }`\n                                            }</div>\n                                            <div>{\n                                                hamCount > 0 && `${hamCount} Ham${\n                                                    hamCount > 1 ? 's' : ''\n                                                }`\n                                            }</div>\n                                            <div>{\n                                                turkeyCount > 0 && `${turkeyCount} Turkey${\n                                                    turkeyCount > 1 ? 's' : ''\n                                                }`\n                                            }</div>\n                                            <div>{\n                                                sauceCount > 0 && `${sauceCount} Sauce${\n                                                    sauceCount > 1 ? 's' : ''\n                                                }`\n                                            }</div>\n                                        </>\n                                        : <div>\n                                            No sales yet\n                                        </div>\n                                }\n                                {/* <Button>Download Labels</Button> */} \n                            </Card>\n                            <Card bordered={false}\n                                style={\n                                    {height: \"100%\"}\n                            }>\n                                <Meta title=\"THEIR PRODUCTS\"/>\n                                <> {\n                                    customerButtPrice && <div>Boston Butts @ ${customerButtPrice}</div>\n                                }\n                                    {\n                                    customerHamPrice && <div>Half Hams @ ${customerHamPrice}</div>\n                                }\n                                    {\n                                    customerTurkeyPrice && <div>Whole Turkeys @ ${customerTurkeyPrice}</div>\n                                }\n                                    {\n                                    customerSaucePrice && <div>BBQ Sauces @ ${customerSaucePrice}</div>\n                                } </>\n                            </Card>\n                        </Col>\n                    </Col>\n                    <Col flex={\"1 1 30%\"}\n                        style={\n                            {height: \"100%\"}\n                    }>\n                        <Card bordered={false}>\n                            <Meta title={\n                                relativeDeliveryDate()\n                            }/>\n                            <Descriptions layout={\"vertical\"}\n                                column={1}>\n                                <Descriptions.Item label=\"Address\">\n                                    {\n                                        deliveryAddress\n                                        ? `${deliveryAddress}\n                                        ${deliveryCity}, ${deliveryState} ${deliveryZip}`\n                                        : \"\"\n                                    }    \n                                </Descriptions.Item>\n                                <Descriptions.Item label=\"Note\">\n                                    {deliveryNotes}</Descriptions.Item>\n                                <Descriptions.Item label=\"\"></Descriptions.Item>\n                            </Descriptions>\n                        </Card>\n                    </Col>\n                    <Col flex={\"1 1 30%\"}\n                        style={\n                            {height: \"100%\"}\n                    }>\n                        <Card bordered={false}\n                            actions={\n                                [\n                                    <>\n                                        <Button disabled>Reset Password</Button>\n                                        <Button disabled>Email Contact</Button>\n                                    </>\n                                ]\n                        }>\n                            <Meta title={\n                                (contactFirstName && contactLastName)\n                                    ? `${\n                                        contactFirstName.toUpperCase()\n                                    } ${\n                                        contactLastName.toUpperCase()\n                                    }`\n                                    : \"No primary contact yet\"\n                            }/>\n                            <Descriptions \n                                column={1}>\n                                <Descriptions.Item label=\"Phone\">\n                                    {\n                                    formatPhoneNumber(contactPhone)\n                                }</Descriptions.Item>\n                                <Descriptions.Item label=\"Email\">\n                                    {contactEmail}</Descriptions.Item>\n                                <Descriptions.Item label=\"Prefers\">\n                                    {contactPreferredMethod}</Descriptions.Item>\n                                <Descriptions.Item label=\"Address\">\n                                    {\n                                        contactAddress\n                                        ? `${contactAddress} ${contactAddressLine2}\n                                        ${contactCity}, ${contactState} ${contactZip}`\n                                        : \"\"\n                                    }\n                                </Descriptions.Item>\n                            </Descriptions>\n                        </Card>\n                        <Card bordered={false}>\n                            <Meta title={\n                                `FIREHOUSE PROFIT: $${firehouseFee}`\n                            }/>\n                            <Descriptions column={1}>\n                                <Descriptions.Item label=\"Their Paid Orders\">\n                                    {\n                                    orders.length\n                                }</Descriptions.Item>\n                                <Descriptions.Item label=\"Their Proceeds\">${\n                                    organizationProceeds.toFixed(2)\n                                }</Descriptions.Item>\n                                <Descriptions.Item label=\"\"></Descriptions.Item>\n                            </Descriptions>\n                        </Card>\n                    </Col>\n                </Row>\n            </Card>\n\n        </div>\n    );\n};\n\nexport default FundraiserDetails;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Calendar, Avatar, Badge } from 'antd';\nimport { includes, sortBy, find, matchesProperty } from 'lodash';\nimport moment from 'moment';\nimport {RecordsContext} from '../App';\n\n\nconst FirehouseCalendar = ({ fundraisers }) => {\n    const [fundraiserData, setFundraiserData] = useState([]);\n    const {\n        recordsDispatch\n      } = useContext(RecordsContext);\n\n    useEffect(() => {\n        setFundraiserData(fundraisers.map(record => {\n            return {\n                ...record,\n                'deliveryDate': moment(record['deliveryDate']),\n                'key': record[\"recordID\"],\n            }\n        }))\n    }, [fundraisers]);\n\n    const showDrawer = (item) => {\n        recordsDispatch({type: \"selectDate\", payload: item});\n        recordsDispatch({type: \"showDrawer\"});\n    }\n\n    const chooseRecordToEdit = (recordName) => {\n        const chosenRecord = find(fundraiserData, matchesProperty('organization', recordName));\n        recordsDispatch({type: \"showDrawer\"});\n        recordsDispatch({type: 'editRecord', payload: chosenRecord[\"recordID\"]})\n    }\n\n    const dateIsMatch = (firstDate, secondDate) => moment(firstDate).isSame(secondDate, 'day');\n\n    const hasButts = (record) => includes(record[\"products\"], 'Boston Butts');\n    const hasHams = (record) => includes(record[\"products\"], 'Half Hams');\n    const hasTurkeys = (record) => includes(record[\"products\"], 'Whole Turkeys');\n    const hasSauce = (record) => includes(record[\"products\"], 'BBQ Sauce');\n    \n    function dateCellRender(date) {\n        return (\n            <div>\n                {fundraiserData && fundraiserData.map(item => {\n                    if (dateIsMatch(date, item[\"deliveryDate\"])) {\n                        return (\n                            <div key={item[\"organization\"]} onClick={() => chooseRecordToEdit(item[\"organization\"])}>\n                                <Avatar.Group style={{ width: '100%', backgroundColor: '#f0f0f0', padding: \"3px\",borderRadius: \"5px\", margin: \"4px 4px 0px 0px\", }} >\n                                    {hasButts(item) && \n                                        <Badge style={{ backgroundColor: \"#8c8c8c\" }} size=\"small\" showZero count={item[\"buttCount\"]}>\n                                            <Avatar size=\"medium\" style={{ color: 'white', backgroundColor: '#597ef7' }}>B</Avatar>\n                                        </Badge>\n                                    }\n                                    {hasHams(item) && \n                                        <Badge style={{ backgroundColor: \"#8c8c8c\" }} size=\"small\" showZero count={item[\"hamCount\"]}>\n                                            <Avatar size=\"medium\" style={{ color: 'white', backgroundColor: '#7cb305' }}>H</Avatar>\n                                        </Badge>\n                                    }\n                                    {hasTurkeys(item) && \n                                        <Badge style={{ backgroundColor: \"#8c8c8c\" }} size=\"small\" showZero count={item[\"turkeyCount\"]}>\n                                            <Avatar size=\"medium\" style={{ color: 'white', backgroundColor: '#13c2c2' }}>T</Avatar>\n                                        </Badge>\n                                    }\n                                    {hasSauce(item) && \n                                        <Badge style={{ backgroundColor: \"#8c8c8c\" }} size=\"small\" showZero count={item[\"sauceCount\"]}>\n                                            <Avatar size=\"medium\" style={{ color: 'white', backgroundColor: '#9254de' }}>S</Avatar>\n                                        </Badge>\n                                    }\n                                </Avatar.Group>\n                            </div>\n                        )\n                    }\n                })\n                }\n            </div>\n        );\n    }\n    \n    function monthCellRender(value) {\n        const monthIsMatch = (object) => moment(object[\"deliveryDate\"]).isSame(value, 'month');\n        const monthsFundraisers = sortBy(fundraiserData.filter(monthIsMatch), ['deliveryDate']);\n        return (\n            <div>\n                {monthsFundraisers.map((item) => {\n                    return (\n                        <div \n                            onClick={() => chooseRecordToEdit(item[\"organization\"])}\n                            key={item[\"organization\"]}\n                            style={{ \n                                width: '100%', \n                                backgroundColor: '#f0f0f0', \n                                padding: \"2px\",\n                                borderRadius: \"5px\", \n                                margin: \"2px 2px 0px 0px\", \n                            }}\n                        >\n                            {item[\"deliveryDate\"].format('DD')} - {item[\"organization\"]}\n                        </div>\n                    )\n                })\n                }\n            </div>\n        )\n        \n    }\n\n    return (\n        <div>\n            {\n                fundraisers[0] && \n                <Calendar\n                    onSelect={showDrawer}\n                    dateCellRender={dateCellRender}\n                    monthCellRender={monthCellRender}\n                />\n            }\n        </div>\n    );\n};\n\nexport default FirehouseCalendar;","import  React, { useState, useEffect, useReducer } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n  } from \"react-router-dom\";\nimport './App.scss';\nimport FundraiserTimeline from './components/FundraiserTimeline';\nimport AllFundraisers from './components/AllFundraisers';\nimport EditFundraiser from './components/EditFundraiser';\nimport CreateFundraiserInquiry from './components/CreateFundraiserInquiry';\nimport Airtable from 'airtable';\nimport { Layout, Menu, Drawer, notification } from 'antd';\nimport { find, matchesProperty } from 'lodash';\nimport recordsReducer from './reducers/recordsReducer';\nimport FundraiserDetails from './components/FundraiserDetails';\nimport FirehouseCalendar from './components/FirehouseCalendar';\n\nconst { Header, Content, Sider } = Layout;\nexport const base = new Airtable({apiKey: process.env.REACT_APP_AIRTABLE_API_KEY}).base('appWga5gfjEZX4q7X');\nexport const RecordsContext = React.createContext(null);\nexport const RecordsDispatch = React.createContext(null);\n\nconst initialState = {\n  focusedRecordID: '',\n  viewFocusedRecord: false,\n  drawerVisible: false,\n  recordToEdit: '',\n  alert: '',\n  recordHasChanged: false,\n  hoveredID: null,\n};\n\nfunction App() {\n  const [fundraisers, setFundraisers] = useState([]);\n  const [focusedFundraiser, setFocusedFundraiser] = useState('');\n  const [recordsState, recordsDispatch] = useReducer(recordsReducer, initialState);\n\n  useEffect( () => { \n    if (recordsState[\"recordHasChanged\"]) {\n      base('Fundraisers').select({\n        view: \"All Fields View\",\n        }).eachPage(function page(records, fetchNextPage) {\n            setFundraisers(records.map(record => record.fields));\n            fetchNextPage();\n        }, function done(err) {\n            if (err) {\n              console.error(err);\n              notification[\"error\"]({\n                message: 'Uh oh...',\n                description: `Something went wrong :( \\n ${err}`,\n                placement: 'topLeft',\n                duration: 0,\n              });\n              return;\n            }\n            notification[\"success\"]({\n              message: 'Success!',\n              description: 'Saved the record',\n              placement: 'topLeft',\n              duration: 2,\n            });\n          });\n        recordsDispatch({\n          type: \"recordChangeComplete\",\n        })\n    } else if (!recordsState[\"focusedRecordID\"]) {\n      base('Fundraisers').select({\n        view: \"All Fields View\",\n        }).eachPage(function page(records, fetchNextPage) {\n            setFundraisers(records.map(record => record.fields));\n            fetchNextPage();\n        }, function done(err) {\n            if (err) { console.error(err); return; }\n        });\n    }\n  }, [recordsState]);\n  \n  useEffect( () => { \n    setFocusedFundraiser(\n      find(fundraisers, matchesProperty('recordID', recordsState[\"focusedRecordID\"])))\n  }, [recordsState, fundraisers]);\n\n  const setHovered = (id) => {\n    recordsDispatch({\n      type: 'setHovered',\n     payload: id,\n    })\n  };\n\n  const closeDrawer = () => recordsDispatch({\n    type: \"closeDrawer\",\n  });\n\n  return (\n    <RecordsContext.Provider\n      value={{\n        recordsState,\n        recordsDispatch,\n      }}\n    >\n      <Router basename={'/raingear'}>\n          <Header \n            style={{ \n              position: \"fixed\",\n              zIndex: 1000,\n              width: '100%' \n            }}\n          >\n            <Menu theme=\"dark\" mode=\"horizontal\">\n                <Menu.Item key=\"1\">\n                  <NavLink to=\"/\">\n                    Home\n                  </NavLink>\n                </Menu.Item>\n                <Menu.Item key=\"3\">\n                  <NavLink to=\"/calendar\">\n                    Calendar\n                  </NavLink>\n                </Menu.Item>\n            </Menu>\n          </Header>\n          <div style={{ height: \"64px\" }}>\n          </div>\n          {recordsState[\"drawerVisible\"] && \n            <Drawer \n              forceRender\n              width={\"80vw\"}\n              visible={recordsState[\"drawerVisible\"]}\n              onClose={closeDrawer}\n            >\n              {recordsState[\"recordToEdit\"] ?\n                <EditFundraiser />\n                :\n                <CreateFundraiserInquiry />\n              }\n            </Drawer>\n          }\n        <Switch>\n          <Route path=\"/\" exact>\n            <Layout>\n              <Sider\n                style={{\n                  overflow: 'auto',\n                  height: '100vh',\n                  position: 'fixed',\n                  left: 0,\n                  backgroundColor: '#d9d9d9',\n                }} \n                width=\"auto\"\n                className=\"site-layout-background\"\n              >\n                {fundraisers[0] && \n                  <FundraiserTimeline\n                    setHovered={setHovered}\n                    fundraisers={fundraisers}\n                  />\n                }\n              </Sider>\n            </Layout>\n            <Layout className=\"site-layout\" style={{ marginLeft: 0 }}>\n                <Content style={{ overflow: 'initial', minHeight: \"100vh\" }}>\n                  {fundraisers[0] && \n                    <>\n                      <AllFundraisers fundraisers={fundraisers} />\n                      <div style={{ height: \"300px\" }}>\n                      </div>\n                    </>\n                  }\n                  {focusedFundraiser && <FundraiserDetails recordToDisplay={focusedFundraiser}/>}\n                  <span style={{ height: \"100px\" }}/>\n                </Content>\n            </Layout>\n          </Route>\n          <Route path=\"/calendar\">\n            {fundraisers[0] && <FirehouseCalendar fundraisers={fundraisers} />}\n          </Route>\n        </Switch>\n      </Router>\n    </RecordsContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}